import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler

# T·∫£i m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán t·ª´ file
xgb_model = joblib.load('xgb_model.pkl')  
scaler = joblib.load('scaler.pkl') 

# T·∫°o giao di·ªán web
st.title('üîç D·ª∞ ƒêO√ÅN H·∫†N M·ª®C T√çN D·ª§NG')
name = st.text_input("T√™n kh√°ch h√†ng: ")
AGE = st.number_input("Tu·ªïi: ", min_value=18, format="%d")
SEX = st.selectbox("Gi·ªõi t√≠nh", ["Nam", "N·ªØ"])
EDUCATION = st.selectbox("Tr√¨nh ƒë·ªô h·ªçc v·∫•n", ["Cao h·ªçc", "ƒê·∫°i h·ªçc", "Trung h·ªçc ph·ªï th√¥ng", "Kh√°c"])
MARRIAGE = st.selectbox("T√¨nh tr·∫°ng h√¥n nh√¢n", ["ƒê√£ k·∫øt h√¥n", "ƒê·ªôc th√¢n", "Kh√°c"])
estimated_income = st.number_input("Thu nh·∫≠p h√†ng th√°ng: ", min_value=0, format="%d")
bill_balance = st.number_input("S·ªë d∆∞ h√≥a ƒë∆°n trung b√¨nh trong 6 th√°ng: ", min_value=0.0, format="%f")
CUR = st.number_input("T·ª∑ l·ªá s·ª≠ d·ª•ng t√≠n d·ª•ng:", min_value=0.0)

# Nh·∫≠p s·ªë d∆∞ h√≥a ƒë∆°n
BILL_BALANCE_Apr = st.number_input("S·ªë d∆∞ h√≥a ƒë∆°n th√°ng 1 (Apr): ", min_value=0.0)
BILL_BALANCE_May = st.number_input("S·ªë d∆∞ h√≥a ƒë∆°n th√°ng 2 (May): ", min_value=0.0)
BILL_BALANCE_Jun = st.number_input("S·ªë d∆∞ h√≥a ƒë∆°n th√°ng 3 (Jun): ", min_value=0.0)
BILL_BALANCE_Jul = st.number_input("S·ªë d∆∞ h√≥a ƒë∆°n th√°ng 4 (Jul): ", min_value=0.0)
BILL_BALANCE_Aug = st.number_input("S·ªë d∆∞ h√≥a ƒë∆°n th√°ng 5 (Aug): ", min_value=0.0)
BILL_BALANCE_Sept = st.number_input("S·ªë d∆∞ h√≥a ƒë∆°n th√°ng 6 (Sept): ", min_value=0.0)

# Nh·∫≠p s·ªë ti·ªÅn thanh to√°n cho t·ª´ng th√°ng (th√°ng Apr ƒë·∫øn th√°ng Sept)
PAY_AMOUNT_Apr = st.number_input("S·ªë ti·ªÅn thanh to√°n th√°ng 1 (Apr): ", min_value=0.0)
PAY_AMOUNT_May = st.number_input("S·ªë ti·ªÅn thanh to√°n th√°ng 2 (May): ", min_value=0.0)
PAY_AMOUNT_Jun = st.number_input("S·ªë ti·ªÅn thanh to√°n th√°ng 3 (Jun): ", min_value=0.0)
PAY_AMOUNT_Jul = st.number_input("S·ªë ti·ªÅn thanh to√°n th√°ng 4 (Jul): ", min_value=0.0)
PAY_AMOUNT_Aug = st.number_input("S·ªë ti·ªÅn thanh to√°n th√°ng 5 (Aug): ", min_value=0.0)
PAY_AMOUNT_Sept = st.number_input("S·ªë ti·ªÅn thanh to√°n th√°ng 6 (Sept): ", min_value=0.0)

# Nh·∫≠p t√¨nh tr·∫°ng thanh to√°n cho t·ª´ng th√°ng (th√°ng Apr ƒë·∫øn th√°ng Sept)
PAY_STATUS_Apr = st.selectbox("T√¨nh tr·∫°ng thanh to√°n th√°ng 1 (Apr)", [0, 1, 2, 3, 4], index=0)
PAY_STATUS_May = st.selectbox("T√¨nh tr·∫°ng thanh to√°n th√°ng 2 (May)", [0, 1, 2, 3, 4], index=0)
PAY_STATUS_Jun = st.selectbox("T√¨nh tr·∫°ng thanh to√°n th√°ng 3 (Jun)", [0, 1, 2, 3, 4], index=0)
PAY_STATUS_Jul = st.selectbox("T√¨nh tr·∫°ng thanh to√°n th√°ng 4 (Jul)", [0, 1, 2, 3, 4], index=0)
PAY_STATUS_Aug = st.selectbox("T√¨nh tr·∫°ng thanh to√°n th√°ng 5 (Aug)", [0, 1, 2, 3, 4], index=0)
PAY_STATUS_Sept = st.selectbox("T√¨nh tr·∫°ng thanh to√°n th√°ng 6 (Sept)", [0, 1, 2, 3, 4], index=0)


# Khi nh·∫•n n√∫t d·ª± ƒëo√°n
if st.button("D·ª± ƒëo√°n"):
    # Chuy·ªÉn ƒë·ªïi c√°c gi√° tr·ªã nh·∫≠p v√†o th√†nh m·ªôt vector cho m√¥ h√¨nh
    SEX = 1 if SEX == "Nam" else 0
    EDUCATION = 1 if EDUCATION == "Cao h·ªçc" else (2 if EDUCATION == "ƒê·∫°i h·ªçc" else (3 if EDUCATION == "Trung h·ªçc ph·ªï th√¥ng" else 4))
    MARRIAGE = 1 if MARRIAGE == "ƒê√£ k·∫øt h√¥n" else (2 if MARRIAGE == "ƒê·ªôc th√¢n" else 3)

    # T·∫°o feature input cho m√¥ h√¨nh
    features = np.array([AGE, SEX, EDUCATION, estimated_income, bill_balance,
                         BILL_BALANCE_Apr, BILL_BALANCE_May, BILL_BALANCE_Jun, 
                         BILL_BALANCE_Jul, BILL_BALANCE_Aug, BILL_BALANCE_Sept, 
                         PAY_STATUS_Apr, PAY_STATUS_May, PAY_STATUS_Jun, 
                         PAY_STATUS_Jul, PAY_STATUS_Aug, PAY_STATUS_Sept, 
                         PAY_AMOUNT_Apr, PAY_AMOUNT_May, PAY_AMOUNT_Jun, 
                         PAY_AMOUNT_Jul, PAY_AMOUNT_Aug, PAY_AMOUNT_Sept, 
                         MARRIAGE, CUR]).reshape(1, -1)

    # Chu·∫©n h√≥a d·ªØ li·ªáu v·ªõi scaler ƒë√£ hu·∫•n luy·ªán
    features_scaled = scaler.transform(features)
    
    # D·ª± ƒëo√°n t·ª´ m√¥ h√¨nh
    prediction = xgb_model.predict(features_scaled)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
    st.write(f"H·∫°n m·ª©c t√≠n d·ª•ng t·ªëi ∆∞u: {prediction[0]:.2f} VND")



